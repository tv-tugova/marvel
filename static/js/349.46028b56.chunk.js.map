{"version":3,"file":"static/js/349.46028b56.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto',\r\n            }}\r\n            src={img}\r\n            alt=\"Error\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst ComicsList = (props) => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);  \n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded);\n    };\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }   \n        \n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {objectFit: 'cover'};\n            if (item.thumbnail ==='http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {objectFit: 'unset'};\n            }\n      \n            return (\n                <li className=\"comics__item\" \n                    key={i}\n                >\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} style={imgStyle} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        );\n    };\n\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    \n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading}\n                style={{ display: comicsEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </> \r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data; \r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n};","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=2aaad9d37131a1f24490695d27b88819';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }; \r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description \r\n                ?  (char.description.length > 210 ? `${char.description.slice(0, 210)}…` : char.description)\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        };\r\n    };\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount\r\n            ? `${comic.pageCount} p.`\r\n            : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            price: comic.prices.price ? `${comic.prices.price}$` : 'not available'\r\n        };\r\n    };\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic};\r\n};\r\n  \r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","AppBanner","_jsxs","className","children","avengers","avengersLogo","props","comicsList","setComicsList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","imgStyle","thumbnail","Link","to","concat","id","title","price","renderItems","errorMessage","spinner","Spinner","disabled","onClick","ComicsPage","_Fragment","ComicsList","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComic","comic","pageCount","language","textObjects","prices","getAllCharacters","results","getCharacter","res","getComic"],"sourceRoot":""}