{"version":3,"file":"static/js/895.066d11fc.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img\r\n            style={{\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto',\r\n            }}\r\n            src={img}\r\n            alt=\"Error\"\r\n        />\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    };\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner} \n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);  \n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    };\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }   \n        \n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    };\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach((item) => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {objectFit: 'cover'};\n            if (item.thumbnail ==='http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {objectFit: 'unset'};\n            }\n      \n            return (\n                <li className=\"char__item\" \n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                              props.onCharSelected(item.id);\n                              focusOnItem(i);\n                            }\n                          }}\n                        >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            );\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        );\n    };\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const items = renderItems(charList);\n        \n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner} \n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n};\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    };\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner} \n            {content}\n        </div>\n    )  \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const comicsList = comics.length === 0 ? 'There is no comics with this character' :\n        comics.map((item, i) => {\n            return (\n                <li className=\"char__comics-item\" key={i}>\n                    {item.name}\n                </li>\n            )\n        }).slice(0, 10);\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n};\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error: true})\r\n    };\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data; \r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n};","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=2aaad9d37131a1f24490695d27b88819';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }; \r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description \r\n                ?  (char.description.length > 210 ? `${char.description.slice(0, 210)}…` : char.description)\r\n                : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        };\r\n    };\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            pageCount: comic.pageCount\r\n            ? `${comic.pageCount} p.`\r\n            : 'No information about the number of pages',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || 'en-us',\r\n            price: comic.prices.price ? `${comic.prices.price}$` : 'not available'\r\n        };\r\n    };\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic};\r\n};\r\n  \r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","comics","comicsList","slice","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","render","MainPage","selectedChar","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComic","comic","title","pageCount","language","textObjects","price","prices","results","res","getAllComics","getComic"],"sourceRoot":""}